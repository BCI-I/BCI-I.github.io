{"ast":null,"code":"import React from'react';import{Helmet}from'react-helmet';import Navbar from'../components/Nav';import{Red,Blue,Green,Yellow,White}from'../components/Highlights';import Note from'../components/Note';import{ContentSection,ContentSubSection}from'../components/ContentSection';import CodeBlock from'../components/Code';import CodeImg from'../imgs/carbon(19).png';import{Code}from'react-code-blocks';// import { CodeBlock, dracula } from \"react-code-blocks\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const HackathonMaterialsPage=()=>{return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Helmet,{children:/*#__PURE__*/_jsx(\"title\",{children:\"BCI Initiative - MIT Hackathon\"})}),/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(ContentSection,{title:\"Preparing for the Hackahton\",title_id:\"#before\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"In order to access some of the software needed you will need:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[\"a \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/join\",target:\"_blank\",children:\"GitHub \"}),\"account\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"a \",/*#__PURE__*/_jsx(\"a\",{href:\"https://hub.docker.com/signup\",target:\"_blank\",children:\"Docker Hub\"}),\" acount\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"a \",/*#__PURE__*/_jsx(\"a\",{href:\"https://hub.duckietown.com/\",target:\"_blank\",children:\"Duckietown Hub\"}),\" account\"]})]}),/*#__PURE__*/_jsx(\"p\",{children:\"Making sure that you have all accounts ready ahead of the competition will help you save time that you can spend hacking instead.\"}),/*#__PURE__*/_jsxs(Note,{title:\"Hardware requirements\",color:\"salmon\",children:[\"To participate in the hackathon, each team needs to be able to stream data from the EEG headset and to send and receive data to and from the Duckiebot. You will need to rely on the manufacturer's software to do so, and this means that you will need devices that can run the software.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"For the Duckiebot you will need either Linux or MacOS laptops (ideally with Intel silicon). For the EEG headset you will need an Android device with Bluetooth connectivity. We strongly encourage all teams to ensure that they have access to such devices.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"b\",{children:\"We will have a very limited number of Android devices available\"}),\"for teams that do not have access to one, but we cannot guarantee that we will have enough for everyone. Please fill in \",/*#__PURE__*/_jsx(\"a\",{href:\"https://forms.gle/FQkiAFPthqyqAbGh6\",target:\"_blank\",children:\" this form \"}),\"let us know ahead of time what hardware you or your team have available to help us plan accordingly.\"]})]}),/*#__PURE__*/_jsxs(ContentSection,{title:\"X.on EEG headset\",title_id:\"#eeg\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"The \",/*#__PURE__*/_jsx(\"a\",{href:\"https://xon-eeg.com/\",target:\"_blank\",children:\"X.on EEG headset\"}),\" is an affordable and easy to use EEG headset. It's light and wireless, making it very portable yet it's capable of recording high quality EEG data from its 8 channels (+ reference) and 3-axis accelerometer.\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"To learn more about the X.on design and specifications, you can check the website for the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://xon-eeg.com/\",target:\"_blank\",children:\"X.on EEG headset\"}),\". On the day of the hackahton, we will provide the \",/*#__PURE__*/_jsx(Yellow,{children:\"X.on user manual\"}),\"describing how to setup and use the headset (also seet this \",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.youtube.com/watch?v=2HwxGtheWJ8\",target:\"_blank\",children:\" video\"}),\". )\"]}),/*#__PURE__*/_jsxs(ContentSubSection,{title:\"X.on software\",title_id:\"xsoftware\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(Green,{children:\"Streaming data from the X.on\"}),\". To stream EEG data from the headset, you will need to connect it to to an Android device with a Bluetooth connection. The X.on user manual will describe how to do this. Once connected, go to \\\"monitor\\\" and the X.on app will stream the data over WiFi using the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://labstreaminglayer.org/#/\",target:\"_blank\",children:\"Lab Streaming Layer (LSL)\"}),\".\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"To \",/*#__PURE__*/_jsx(Blue,{children:\"read the data on your laptop\"}),\", you can use the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/labstreaminglayer/pylsl\",target:\"_blank\",children:\"pylsl\"}),\" Python library. We recomend familiarizing yourself with both LSL and pylsl before the hackathon.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"This \",/*#__PURE__*/_jsx(\"b\",{children:\"code\"}),\" shows how to stream eeg data in Python using pylsl:\"]}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                    \\\"\\\"\\\"\\n                    Example program to show how to read a \\n                    multi-channel time series from LSL.\\n                    \\\"\\\"\\\"\\n        \\n                    from pylsl import StreamInlet, resolve_stream\\n                    \\n                    \\n                    def main():\\n                        # first resolve an EEG stream on the lab network\\n                        print(\\\"looking for an EEG stream...\\\")\\n                        streams = resolve_stream('type', 'EEG')\\n                    \\n                        # create a new inlet to read from the stream\\n                        # you'll need to make sure that you're accessing YOUR headset\\n                        inlet = StreamInlet(streams[0])\\n                    \\n                        while True:\\n                            # get a new sample\\n                            sample, timestamp = inlet.pull_sample()\\n                            console.log(timestamp, sample)\\n                    \\n                    \\n                    if __name__ == '__main__':\\n                        main()\\n                    \",language:\"phython\"}),/*#__PURE__*/_jsx(Note,{title:\"Ensuring correct streaming\",color:\"lightblue\",children:\"To make sure that your computer can see the LSL stream, you need to have both your laptop and Android device connected to the same Wi-Fi network. If you're still unable to see the stream, enable Bluetooth thetering and WiFi hotspot on your phone.\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"During the hackathon, there will be a lot of devices on at the same time, each streaming data. To make sure that you can see the stream from your headset, first take note of the SN (Serial Number) indicated near the carging port of your headset. Next, in the X.on App make sure you're connected to the device with the same SN. \",/*#__PURE__*/_jsx(\"br\",{}),\"In pylsl, you can get a list of all the LSL streams and check for the one with the same SN:\"]}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n        import pylsl\\n\\n        # Resolve EEG streams\\n        streams = pylsl.resolve_streams()\\n        \\n        # Iterate through streams\\n        print(f\\\"Found {len(streams)} streams\\\")\\n        print(\\\"---------------\\\")\\n        \\n        for stream in streams:\\n            print(\\\"Stream Name:\\\", stream.name())\\n            print(\\\"Stream Type:\\\", stream.type())\\n            print(\\\"Stream ID:\\\", stream.source_id())   # this should match your X.on Serial Number\\n            print(\\\"Stream Unique Identifier:\\\", stream.uid())\\n            print(\\\"---------------\\\")\\n        \",language:\"python\"})]})]}),/*#__PURE__*/_jsxs(ContentSection,{title:\"Duckietown\",title_id:\"#db\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"The Duckiebots are affordable self-driving cars with several sensors and enough computational power to run complex algorithms. They are designed to be used in educational environments and are a great platform to learn about robotics and autonomous vehicles. We will use them as a platform to test the BCI hackathon participants' ability to control a robot using their brain activity.\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Alongside the physical robots, Duckietown has developed the\",/*#__PURE__*/_jsx(Red,{children:\"Duckiematrix \"}),\" a physically-realistic digital twin of the Duckiebot. We will use the Duckiematrix to simulated the Duckiebots during development of the BCI algorithms. For the final competition, we will switch to using the physical Duckiebots. These instructions will help you set up you computer to run the Duckiematrix and provide some example for controlling your robots.\"]}),/*#__PURE__*/_jsxs(ContentSubSection,{title:\"Duckiebot software\",title_id:\"dbsoftware\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"To get ready to use the Duckietown software, start by reading both the\",/*#__PURE__*/_jsx(\"a\",{href:\"https://docs.duckietown.com/ente/devmanual-Duckiematrix/intro.html\",target:\"_blank\",children:\" Duckiematrix\"}),\" and \",/*#__PURE__*/_jsx(\"a\",{href:\"https://docs.duckietown.com/ente/opmanual-duckiebot/intro.html\",target:\"_blank\",children:\" Duckiebot\"}),\" user manuals.\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"To beging setting up your computer to run the Duckiematrix, you will need to install Python as a \",/*#__PURE__*/_jsx(\"b\",{children:\"system installation\"}),\" (i.e. not in a virtual environment with pip or conda). To do that, follow the instructions\",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.python.org/downloads/release/python-3100/\",target:\"_blank\",children:\" here\"}),\". Next, make sure you'll be using the system python version:\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"imgcontainer\",children:/*#__PURE__*/_jsx(\"img\",{src:CodeImg,alt:\"Duckiebot\"})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Next, you will install the \",/*#__PURE__*/_jsx(Blue,{children:\"Duckietown Shell\"}),\":\"]}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                        python3 -m pip  install git+https://github.com/duckietown/duckietown-shell@v6\\n                        which dts\\n                        \",language:\"bash\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"If everything went correct, you can connect your duckietown account. Enter\",/*#__PURE__*/_jsx(\"code\",{children:\"dts\"}),\"in the terminal, select the account type \",/*#__PURE__*/_jsx(\"b\",{children:\"ente\"}),\" and generate a token by going to \",/*#__PURE__*/_jsx(\"a\",{href:\"https://hub.duckietown.com/signin/?next=/profile/token/generator/\",target:\"_blank\",children:\"this link\"}),\".\",/*#__PURE__*/_jsx(\"br\",{}),\"Once you have connected the account, enter:\",/*#__PURE__*/_jsx(\"code\",{children:\"dts commands\"}),\" in your terminal to finish installing the Duckietown CLI. You will also connect your Docker account to the Duckietown account by running:\"]}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                        dts config docker credentials set \\n                        --username DOCKERHUB_USERNAME \\n                        --password DOCKERHUB_ACCESS_TOKEN\\n                        \",language:\"bash\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"             If everything went well, you should be able to run commands like\",/*#__PURE__*/_jsx(\"code\",{children:\"dts fleet discover\"}),\" without errors.\"]}),/*#__PURE__*/_jsxs(Note,{title:\"Docker\",color:\"salmon\",children:[\"To run Duckietown code, you need to have \",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.docker.com/\",target:\"_blank\",children:\"Docker\"}),\" installed and running!\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"To install the \",/*#__PURE__*/_jsx(Blue,{children:\"Duckietown Matrix\"}),\"run: \",/*#__PURE__*/_jsx(\"code\",{children:\"dts matrix install\"}),\". Among other things, this will install an \",/*#__PURE__*/_jsx(\"code\",{children:\".app\"}),\" file running the matrix's renderer. You'll need to know its location in your computer, to find it, run:\",/*#__PURE__*/_jsx(\"code\",{children:\"dts matrix run -s -S\"}),\". \",/*#__PURE__*/_jsx(\"br\",{}),\"Once we're ready to launch the matrix's renderer, you will need to double click the .app file. The first time you run the matrix's .app file, you might get a message saying that the file couldn't be opened because it was downloaded from the internet. To enable it, go to \",/*#__PURE__*/_jsx(\"code\",{children:\"System Preferences Security & Privacy\"}),\" and you should see a message asking if you want to open it anyways - say yes.\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Before launching the matrix's renderer, you will need to launch the simulation engine. To do so, you need to specify a \",/*#__PURE__*/_jsx(\"i\",{children:\"map\"}),\" to use. One of the great featues of the Duckiematrix is that you can create realistic looking maps. You will use a replica of the competition maps - download it \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/BCI-I/MIT-BCI-Hackathon\",target:\"_blank\",children:\"here\"}),\". Download the folder and move \",/*#__PURE__*/_jsx(\"code\",{children:\"BCI-I\"}),\" to the\",/*#__PURE__*/_jsx(\"code\",{children:\".app\"}),\"file's folder.\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"To \",/*#__PURE__*/_jsx(Red,{children:\"run the matix\"}),\", engine -\",/*#__PURE__*/_jsx(\"code\",{children:\"cd\"}),\" to the app folder and run: \",/*#__PURE__*/_jsx(\"code\",{children:\"dts matrix run -S -m ./bci-i/\"}),\". Now, open the .app: you should see a window with a rendering of the map and a Duckiebot in it. You have different views at your disposal, and you can use the WASD keys to move the camera around and even control the duckiebot!\",/*#__PURE__*/_jsx(\"br\",{}),\"Below, we will show how to use the Duckietown SDK to control the robot: when you do so, you should see the robot in the matrix move accordingly!\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"To control your robots (both virtual and real) you'll need to install the Duckietown SDK:\",/*#__PURE__*/_jsx(\"code\",{children:\"python3 -m pip install \\\"duckietown-sdk\\\"\"}),\".\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"If everything went correctly, you should have the Duckiematrix open, and you should be able to see a map and a Duckiebot in it. Next, we will share some code for moving the robot and to read data from it. Note that the same code will work for both the simulated and real robots, you will just need to change the robot name accordingly.\",/*#__PURE__*/_jsx(\"br\",{}),\"Start by creating a reference to your robot:\"]}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                    import time\\n                    from typing import Tuple, List\\n                    from duckietown.sdk.robots.duckiebot import DB21J\\n                    from duckietown.sdk.types import LEDsPattern, RGBAColor\\n            \\n                    SIMULATED_ROBOT_NAME: str = \\\"map_0/vehicle_0\\\"\\n                    REAL_ROBOT_NAME: str = \\\"rover\\\"\\n            \\n                    robot: DB21J = DB21J(SIMULATED_ROBOT_NAME, simulated=True)  # change accordingly\\n                    \",language:\"python\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Next, you can use this code to send commands to the wheels and LEDs:\"}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                    # move wheels\\n                    speeds = (0.5, 0.5)\\n                    robot.motors.start()\\n                    stime: float = time.time()\\n                    while time.time() - stime < 4:\\n                      robot.motors.publish(speeds)\\n                      time.sleep(0.25)\\n                      print(\\\"speedy\\\")\\n                    robot.motors.stop()\\n                    print(\\\"Stopped.\\\")\\n                    \",language:\"python\"}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                    # LED lights show\\n                    frequency: float = 1.4\\n                    off: RGBAColor = (0, 0, 0, 0.0)\\n                    amber: RGBAColor = (1, 0.7, 0, 1.0)\\n                    lights_on: LEDsPattern = LEDsPattern(front_left=amber, front_right=amber, rear_right=amber, rear_left=amber)\\n                    lights_off: LEDsPattern = LEDsPattern(front_left=off, front_right=off, rear_right=off, rear_left=off)\\n                    pattern: List[LEDsPattern] = [lights_on, lights_off]\\n                    robot.lights.start()\\n                    stime: float = time.time()\\n                    i: int = 0\\n                    while time.time() - stime < 8:\\n                      lights: LEDsPattern = pattern[i % 2]\\n                      robot.lights.publish(lights)\\n                      time.sleep(1. / frequency)\\n                      i += 1\\n                    robot.lights.stop()\\n                    print(\\\"Stopped.\\\")\\n                    \",language:\"python\"}),/*#__PURE__*/_jsxs(Note,{title:\"Careful\",color:\"salmon\",children:[\"When using a real Duckiebot, make sure that the bot is on the ground and that there's no obstacle in front of it. When you send a command to it, it \",/*#__PURE__*/_jsx(\"b\",{children:\"will move\"}),\" - avoid damaging it by checking the environment first.\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"To stream data from the ToF (Time of Flight; distance) sensor and camera, you can use this code:\"}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                    # ToF\\n                    def _range_finder_cb(data: Optional[float]):\\n                      if data is None:\\n                        print(\\\"Out of range.\\\")\\n                        return\\n                      print(f\\\"Range: {data} meters.\\\")\\n            \\n                    robot.range_finder.start()\\n                    stime: float = time.time()\\n                    while time.time() - stime < 2:\\n                        data = robot.range_finder.capture(block=True)\\n                        _range_finder_cb(data)\\n                    print(\\\"Stopped.\\\")\\n                    robot.range_finder.stop()\\n                    \",language:\"python\"}),/*#__PURE__*/_jsx(CodeBlock,{text:\"\\n                    # Camera\\n                    def _camera_cb(data: BGRImage):\\n                      print(f\\\"Received image of shape: {data.shape}\\\")\\n            \\n            \\n                    robot.camera.start()\\n                    stime: float = time.time()\\n                    while time.time() - stime < 2:\\n                      data = robot.camera.capture(block=True)\\n                      _camera_cb(data)\\n                    print(\\\"Stopped.\\\")\\n                    robot.camera.stop()\\n                    \",language:\"python\"}),/*#__PURE__*/_jsx(Note,{title:\"Is it working?\",color:\"green\",children:\"If everything is working correctly, you should see the robot move in the Duckiematrix! Keep an eye out for the terminal where you're running the matrix's engine, you should see messages letting you know when you hit obstacles with the robot.\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"The last thing you need to know, is how to use the real Duckiebots. Start with \",/*#__PURE__*/_jsx(\"code\",{children:\"dts fleet discover\"}),\" to make sure that your Duckiebot is on and connected to the internet, take note of the name. Beyond that, just replace the robot name above with the physical robot's name from the fleet discovery, and you're good to go! To turn off the physical robot, run:\",/*#__PURE__*/_jsx(\"code\",{children:\"dts duckiebot shutdown ROBOT_NAME\"}),\". You can also go to: \",/*#__PURE__*/_jsx(\"code\",{children:\"ROBOT_NAME.local/dashboard/robot\"}),\"in your web browser to see the robot's status and some additional info.\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"That's it! You now know how to stream data from the X.on headset and control the robot - the rest is up to you!\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{})]});};export default HackathonMaterialsPage;","map":{"version":3,"names":["React","Helmet","Navbar","Red","Blue","Green","Yellow","White","Note","ContentSection","ContentSubSection","CodeBlock","CodeImg","Code","jsx","_jsx","jsxs","_jsxs","HackathonMaterialsPage","children","title","title_id","href","target","color","text","language","className","src","alt"],"sources":["/Users/federicoclaudi/Documents/Github/BCI-I.github.io/src/pages/HackathonMaterials.js"],"sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport Navbar from '../components/Nav';\nimport { Red, Blue, Green, Yellow, White } from '../components/Highlights';\nimport Note from '../components/Note';\nimport { ContentSection, ContentSubSection } from '../components/ContentSection';\nimport CodeBlock from '../components/Code';\n\n\nimport CodeImg from '../imgs/carbon(19).png'\nimport { Code } from 'react-code-blocks';\n\n\n// import { CodeBlock, dracula } from \"react-code-blocks\";\n\nconst HackathonMaterialsPage = () => {\n\n\n    return (\n        <div>\n            <Helmet>\n                <title>BCI Initiative - MIT Hackathon</title>\n\n            </Helmet>\n\n            <Navbar />\n\n            <ContentSection title=\"Preparing for the Hackahton\" title_id=\"#before\">\n                <p>\n                    In order to access some of the software needed you will need:\n                </p>\n\n                <ul>\n                    <li>a <a href=\"https://github.com/join\" target=\"_blank\">GitHub </a>\n                        account</li>\n                    <li>a <a href=\"https://hub.docker.com/signup\" target=\"_blank\">Docker\n                        Hub</a> acount</li>\n                    <li>a <a href=\"https://hub.duckietown.com/\" target=\"_blank\">Duckietown\n                        Hub</a> account</li>\n                </ul>\n\n                <p>\n                    Making sure that you have all accounts ready ahead of the competition will\n                    help you save time that\n                    you can spend hacking instead.\n                </p>\n\n                <Note title=\"Hardware requirements\" color=\"salmon\">\n                    To participate in the hackathon, each team needs to be able to stream\n                    data from the EEG headset and to\n                    send and receive data to and from the Duckiebot. You will need to rely\n                    on the manufacturer's software to do so,\n                    and this means that you will need devices that can run the\n                    software.<br /><br />\n\n                    For the Duckiebot you will need either Linux or MacOS laptops (ideally\n                    with Intel silicon).\n                    For the EEG headset you will need an Android device with Bluetooth\n                    connectivity.\n                    We strongly encourage all teams to ensure that they have access to such\n                    devices.\n                    <br /><br />\n                    <b>\n                        We will have a very limited number of Android devices available\n                    </b>for teams that do not have access to one, but we cannot guarantee\n                    that we will have enough for everyone.\n                    Please fill in <a href=\"https://forms.gle/FQkiAFPthqyqAbGh6\" target=\"_blank\"> this form </a>\n                    let us know ahead of time what hardware you or your team have available\n                    to help us plan accordingly.\n                </Note>\n            </ContentSection>\n\n\n            <ContentSection title=\"X.on EEG headset\" title_id=\"#eeg\">\n                <p>\n                    The <a href=\"https://xon-eeg.com/\" target=\"_blank\">X.on EEG headset</a> is\n                    an affordable and easy\n                    to use EEG headset. It's light and wireless, making it very portable yet\n                    it's capable of\n                    recording high quality EEG data from its 8 channels (+ reference) and\n                    3-axis accelerometer.\n                </p>\n                <br />\n                <p>\n                    To learn more about the X.on design and specifications, you can check the\n                    website for the <a href=\"https://xon-eeg.com/\" target=\"_blank\">X.on EEG headset</a>.\n                    On the day of the hackahton, we will provide the <Yellow>X.on user manual</Yellow>\n                    describing how to setup and use the headset (also\n                    seet this <a href=\"https://www.youtube.com/watch?v=2HwxGtheWJ8\" target=\"_blank\"> video</a>.\n                    )\n                </p>\n\n                <ContentSubSection title=\"X.on software\" title_id=\"xsoftware\">\n                    <p>\n                        <Green>Streaming data from the X.on</Green>. To\n                        stream EEG data from the headset,\n                        you will need to connect it to to an Android device with a Bluetooth\n                        connection. The X.on user manual\n                        will describe how to do this.\n                        Once connected, go to \"monitor\" and the X.on app will stream the data over\n                        WiFi using the <a href=\"https://labstreaminglayer.org/#/\"\n                            target=\"_blank\">Lab Streaming Layer (LSL)</a>.\n                        <br /><br />\n                        To <Blue>read the data on your laptop</Blue>,\n                        you can use the <a href=\"https://github.com/labstreaminglayer/pylsl\"\n                            target=\"_blank\">pylsl</a> Python library.\n                        We recomend familiarizing yourself with\n                        both LSL and pylsl before the hackathon.\n                        <br /><br />\n                        This <b>code</b> shows how to stream eeg data in Python using pylsl:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n                    \"\"\"\n                    Example program to show how to read a \n                    multi-channel time series from LSL.\n                    \"\"\"\n        \n                    from pylsl import StreamInlet, resolve_stream\n                    \n                    \n                    def main():\n                        # first resolve an EEG stream on the lab network\n                        print(\"looking for an EEG stream...\")\n                        streams = resolve_stream('type', 'EEG')\n                    \n                        # create a new inlet to read from the stream\n                        # you'll need to make sure that you're accessing YOUR headset\n                        inlet = StreamInlet(streams[0])\n                    \n                        while True:\n                            # get a new sample\n                            sample, timestamp = inlet.pull_sample()\n                            console.log(timestamp, sample)\n                    \n                    \n                    if __name__ == '__main__':\n                        main()\n                    `}\n                        language=\"phython\"\n                    />\n\n                    <Note title=\"Ensuring correct streaming\" color=\"lightblue\">\n                        To make sure that your computer can see the LSL stream, you need to have\n                        both your\n                        laptop and Android device connected to the same Wi-Fi network. If you're\n                        still unable\n                        to see the stream, enable Bluetooth thetering and WiFi hotspot on your\n                        phone.\n                    </Note>\n\n                    <br />\n                    <p>\n                        During the hackathon, there will be a lot of devices on at the same time,\n                        each streaming data.\n                        To make sure that you can see the stream from your headset, first take\n                        note of the SN (Serial Number)\n                        indicated near the carging port of your headset. Next, in the X.on App\n                        make sure you're connected to\n                        the device with the same SN. <br />\n                        In pylsl, you can get a list of all the LSL streams and check for the one\n                        with the same SN:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n        import pylsl\n\n        # Resolve EEG streams\n        streams = pylsl.resolve_streams()\n        \n        # Iterate through streams\n        print(f\"Found {len(streams)} streams\")\n        print(\"---------------\")\n        \n        for stream in streams:\n            print(\"Stream Name:\", stream.name())\n            print(\"Stream Type:\", stream.type())\n            print(\"Stream ID:\", stream.source_id())   # this should match your X.on Serial Number\n            print(\"Stream Unique Identifier:\", stream.uid())\n            print(\"---------------\")\n        `}\n                        language=\"python\"\n                    ></CodeBlock>\n\n                </ContentSubSection>\n\n            </ContentSection>\n\n            <ContentSection title=\"Duckietown\" title_id=\"#db\">\n                <p>\n                    The Duckiebots are affordable self-driving cars with several sensors and\n                    enough\n                    computational power to run complex algorithms. They are designed to be\n                    used in\n                    educational environments and are a great platform to learn about\n                    robotics and\n                    autonomous vehicles. We will use them as a platform to test the BCI\n                    hackathon\n                    participants' ability to control a robot using their brain activity.\n                </p>\n                <br />\n                <p>\n                    Alongside the physical robots, Duckietown has developed the\n                    <Red>Duckiematrix </Red> a\n                    physically-realistic digital twin of the Duckiebot.\n                    We will use the Duckiematrix to simulated the Duckiebots during\n                    development of\n                    the BCI algorithms. For the final competition, we will switch to using\n                    the physical Duckiebots.\n                    These instructions will help you set up you computer to run the\n                    Duckiematrix\n                    and provide some example for controlling your robots.\n                </p>\n\n\n                <ContentSubSection title=\"Duckiebot software\" title_id=\"dbsoftware\">\n                    <p>\n                        To get ready to use the Duckietown software, start by reading both the\n                        <a\n                            href=\"https://docs.duckietown.com/ente/devmanual-Duckiematrix/intro.html\"\n                            target=\"_blank\"> Duckiematrix</a> and <a\n                                href=\"https://docs.duckietown.com/ente/opmanual-duckiebot/intro.html\"\n                                target=\"_blank\"> Duckiebot</a> user manuals.\n                    </p>\n                    <br />\n                    <p>\n                        To beging setting up your computer to run the Duckiematrix, you will\n                        need to install\n                        Python as a <b>system installation</b> (i.e. not in a virtual\n                        environment with pip or conda).\n                        To do that, follow the instructions\n                        <a href=\"https://www.python.org/downloads/release/python-3100/\"\n                            target=\"_blank\"> here</a>.\n                        Next, make sure you'll be using the system python version:\n                    </p>\n                    <br />\n\n                    <div className=\"imgcontainer\">\n                        <img src={CodeImg} alt=\"Duckiebot\" />\n                    </div>\n\n                    <br />\n                    <p>\n                        Next, you will install the <Blue>Duckietown Shell</Blue>:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n                        python3 -m pip  install git+https://github.com/duckietown/duckietown-shell@v6\n                        which dts\n                        `}\n                        language=\"bash\"\n                    />\n                    <br />\n\n\n                    <p>\n                        If everything went correct,\n                        you can connect your duckietown account. Enter\n                        <code>dts</code>\n                        in the terminal,\n                        select the account type <b>ente</b> and generate a token\n                        by going to <a\n                            href=\"https://hub.duckietown.com/signin/?next=/profile/token/generator/\"\n                            target=\"_blank\">this link</a>.\n\n\n                        <br />\n\n                        Once you have connected the account, enter:\n                        <code>dts commands</code> in your terminal to finish installing the\n                        Duckietown\n                        CLI.\n                        You will also connect your Docker account to the Duckietown account by\n                        running:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n                        dts config docker credentials set \n                        --username DOCKERHUB_USERNAME \n                        --password DOCKERHUB_ACCESS_TOKEN\n                        `}\n                        language=\"bash\" />\n\n\n                    <br />\n                    <p>             If everything went well, you should be able to run commands like\n                        <code>dts fleet discover</code> without errors.</p>\n\n                    <Note title=\"Docker\" color=\"salmon\">\n                        To run Duckietown code, you need to have <a\n                            href=\"https://www.docker.com/\" target=\"_blank\">Docker</a> installed and running!\n                    </Note>\n\n                    <p>\n                        To install the <Blue>Duckietown Matrix</Blue>\n                        run: <code>dts matrix install</code>.\n                        Among other things, this will install an <code>.app</code> file\n                        running\n                        the matrix's renderer.\n                        You'll need to know its location in your computer, to find it, run:\n                        <code>dts matrix run -s -S</code>. <br />\n                        Once we're ready to launch the matrix's renderer, you will need to\n                        double click the .app file.\n                        The first time you run the matrix's .app file, you might get a\n                        message\n                        saying that\n                        the file couldn't be opened because it was downloaded from the\n                        internet.\n                        To enable it, go to <code>System Preferences Security & Privacy\n                        </code> and you should\n                        see a message asking if you want to open it anyways - say yes.\n                    </p>\n                    <br />\n                    <p>\n                        Before launching the matrix's renderer, you will need to launch the\n                        simulation engine.\n                        To do so, you need to specify a <i>map</i> to use.\n                        One of the great featues of the Duckiematrix is that you can create\n                        realistic looking maps.\n                        You will use a replica of the competition maps - download it <a href=\"https://github.com/BCI-I/MIT-BCI-Hackathon\"\n                            target=\"_blank\">here</a>.\n                        Download the folder and move <code>BCI-I</code> to the\n                        <code>.app</code>\n                        file's folder.\n                    </p>\n                    <br /><br />\n                    <p>\n                        To <Red>run the matix</Red>, engine -\n                        <code>cd</code> to the app folder and run: <code>dts matrix run -S\n                            -m\n                            ./bci-i/</code>.\n                        Now, open the .app: you should see a window with a rendering of the\n                        map\n                        and a Duckiebot in it. You have different views at your disposal,\n                        and\n                        you can use the WASD keys to move the camera around and even control\n                        the\n                        duckiebot!\n                        <br />\n                        Below, we will show how to use the Duckietown SDK to control the\n                        robot:\n                        when you do so, you should see the robot in the\n                        matrix move accordingly!\n                    </p>\n\n                    <br />\n                    <p>\n                        To control\n                        your robots (both virtual and real) you'll need to install the\n                        Duckietown SDK:\n                        <code>python3 -m pip install \"duckietown-sdk\"</code>.\n                    </p>\n\n                    <br /><br />\n                    <p>\n                        If everything went correctly, you should have the Duckiematrix open,\n                        and you should be able to see a map and a Duckiebot in it.\n                        Next, we will share some code for moving the robot and to read data\n                        from it. Note that the same code will work for both the simulated\n                        and real robots, you will just need to change the robot name\n                        accordingly.\n                        <br />Start by creating a reference to your robot:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n                    import time\n                    from typing import Tuple, List\n                    from duckietown.sdk.robots.duckiebot import DB21J\n                    from duckietown.sdk.types import LEDsPattern, RGBAColor\n            \n                    SIMULATED_ROBOT_NAME: str = \"map_0/vehicle_0\"\n                    REAL_ROBOT_NAME: str = \"rover\"\n            \n                    robot: DB21J = DB21J(SIMULATED_ROBOT_NAME, simulated=True)  # change accordingly\n                    `}\n                        language=\"python\"\n                    />\n                    <p>Next, you can use this code to send commands to the wheels\n                        and LEDs:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n                    # move wheels\n                    speeds = (0.5, 0.5)\n                    robot.motors.start()\n                    stime: float = time.time()\n                    while time.time() - stime < 4:\n                      robot.motors.publish(speeds)\n                      time.sleep(0.25)\n                      print(\"speedy\")\n                    robot.motors.stop()\n                    print(\"Stopped.\")\n                    `}\n                        language=\"python\"\n                    />\n\n                    <CodeBlock\n                        text={`\n                    # LED lights show\n                    frequency: float = 1.4\n                    off: RGBAColor = (0, 0, 0, 0.0)\n                    amber: RGBAColor = (1, 0.7, 0, 1.0)\n                    lights_on: LEDsPattern = LEDsPattern(front_left=amber, front_right=amber, rear_right=amber, rear_left=amber)\n                    lights_off: LEDsPattern = LEDsPattern(front_left=off, front_right=off, rear_right=off, rear_left=off)\n                    pattern: List[LEDsPattern] = [lights_on, lights_off]\n                    robot.lights.start()\n                    stime: float = time.time()\n                    i: int = 0\n                    while time.time() - stime < 8:\n                      lights: LEDsPattern = pattern[i % 2]\n                      robot.lights.publish(lights)\n                      time.sleep(1. / frequency)\n                      i += 1\n                    robot.lights.stop()\n                    print(\"Stopped.\")\n                    `}\n                        language=\"python\"\n                    />\n\n                    <Note title=\"Careful\" color=\"salmon\">\n                        When using a real Duckiebot, make sure that the bot is on the\n                        ground\n                        and that there's no obstacle in front of it. When you send a\n                        command\n                        to it, it <b>will move</b> - avoid damaging it by checking\n                        the environment first.\n                    </Note>\n\n                    <p>\n                        To stream data from the ToF (Time of Flight; distance) sensor and\n                        camera, you can use this code:\n                    </p>\n\n\n                    <CodeBlock\n                        text={`\n                    # ToF\n                    def _range_finder_cb(data: Optional[float]):\n                      if data is None:\n                        print(\"Out of range.\")\n                        return\n                      print(f\"Range: {data} meters.\")\n            \n                    robot.range_finder.start()\n                    stime: float = time.time()\n                    while time.time() - stime < 2:\n                        data = robot.range_finder.capture(block=True)\n                        _range_finder_cb(data)\n                    print(\"Stopped.\")\n                    robot.range_finder.stop()\n                    `}\n                        language=\"python\"\n                    />\n\n                    <CodeBlock\n                        text={`\n                    # Camera\n                    def _camera_cb(data: BGRImage):\n                      print(f\"Received image of shape: {data.shape}\")\n            \n            \n                    robot.camera.start()\n                    stime: float = time.time()\n                    while time.time() - stime < 2:\n                      data = robot.camera.capture(block=True)\n                      _camera_cb(data)\n                    print(\"Stopped.\")\n                    robot.camera.stop()\n                    `}\n                        language=\"python\"\n                    />\n\n\n                    <Note title=\"Is it working?\" color=\"green\">\n                        If everything is working correctly, you should see the robot move\n                        in\n                        the Duckiematrix!\n                        Keep an eye out for the terminal where you're running the matrix's\n                        engine, you should see\n                        messages letting you know when you hit obstacles with the robot.\n                    </Note>\n                </ContentSubSection>\n\n                <br /><br />\n                <p>\n                    The last thing you need to know, is how to use the real Duckiebots.\n                    Start with <code>dts fleet discover</code> to make sure that\n                    your Duckiebot is on and connected to the internet, take note of the\n                    name. Beyond that, just replace the robot name above with the\n                    physical\n                    robot's name from the fleet discovery, and you're good to go!\n                    To turn off the physical robot, run:\n                    <code>dts duckiebot shutdown ROBOT_NAME</code>.\n\n                    You can also go to: <code>ROBOT_NAME.local/dashboard/robot</code>\n                    in your web browser to see the robot's status and some\n                    additional info.\n                </p>\n\n                <p>\n                    That's it! You now know how to stream data from the X.on headset and\n                    control the robot - the rest is up to you!\n                </p>\n            </ContentSection>\n            <br /><br /><br />\n        </div>\n    );\n};\n\nexport default HackathonMaterialsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}