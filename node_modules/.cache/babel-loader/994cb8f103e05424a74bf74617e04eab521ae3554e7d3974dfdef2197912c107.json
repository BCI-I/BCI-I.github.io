{"ast":null,"code":"var _jsxFileName = \"/Users/federicoclaudi/Documents/Github/BCI-I.github.io/src/pages/HackathonMaterials.js\";\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport Navbar from '../components/Nav';\nimport { Red, Blue, Green, Yellow, White } from '../components/Highlights';\nimport Note from '../components/Note';\nimport { ContentSection, ContentSubSection } from '../components/ContentSection';\nimport CodeBlock from '../components/Code';\nimport { Code } from 'react-code-blocks';\n\n// import { CodeBlock, dracula } from \"react-code-blocks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HackathonMaterialsPage = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"BCI Initiative - MIT Hackathon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentSection, {\n      title: \"Preparing for the Hackahton\",\n      title_id: \"#before\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In order to access some of the software needed you will need:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"a \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://github.com/join\",\n            target: \"_blank\",\n            children: \"GitHub\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 27\n          }, this), \"account\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"a \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://hub.docker.com/signup\",\n            target: \"_blank\",\n            children: \"Docker Hub\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 27\n          }, this), \" acount\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"a \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://hub.duckietown.com/\",\n            target: \"_blank\",\n            children: \"Duckietown Hub\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 27\n          }, this), \" account\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Making sure that you have all accounts ready ahead of the competition will help you save time that you can spend hacking instead.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Note, {\n        title: \"Hardware requirements\",\n        color: \"salmon\",\n        children: [\"To participate in the hackathon, each team needs to be able to stream data from the EEG headset and to send and receive data to and from the Duckiebot. You will need to rely on the manufacturer's software to do so, and this means that you will need devices that can run the software.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 36\n        }, this), \"For the Duckiebot you will need either Linux or MacOS laptops (ideally with Intel silicon). For the EEG headset you will need an Android device with Bluetooth connectivity. We strongly encourage all teams to ensure that they have access to such devices.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"We will have a very limited number of Android devices available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), \"for teams that do not have access to one, but we cannot guarantee that we will have enough for everyone. Please fill in \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://forms.gle/FQkiAFPthqyqAbGh6\",\n          target: \"_blank\",\n          children: \" this form \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 36\n        }, this), \"let us know ahead of time what hardware you or your team have available to help us plan accordingly.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentSection, {\n      title: \"X.on EEG headset\",\n      title_id: \"#eeg\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://xon-eeg.com/\",\n          target: \"_blank\",\n          children: \"X.on EEG headset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), \" is an affordable and easy to use EEG headset. It's light and wireless, making it very portable yet it's capable of recording high quality EEG data from its 8 channels (+ reference) and 3-axis accelerometer.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"To learn more about the X.on design and specifications, you can check the website for the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://xon-eeg.com/\",\n          target: \"_blank\",\n          children: \"X.on EEG headset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 37\n        }, this), \". On the day of the hackahton, we will provide the \", /*#__PURE__*/_jsxDEV(Yellow, {\n          children: \"X.on user manual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 70\n        }, this), \"describing how to setup and use the headset (also seet this \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.youtube.com/watch?v=2HwxGtheWJ8\",\n          target: \"_blank\",\n          children: \" video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 31\n        }, this), \". )\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ContentSubSection, {\n        title: \"X.on software\",\n        title_id: \"xsoftware\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(Green, {\n            children: \"Streaming data from the X.on\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), \". To stream EEG data from the headset, you will need to connect it to to an Android device with a Bluetooth connection. The X.on user manual will describe how to do this. Once connected, go to \\\"monitor\\\" and the X.on app will stream the data over WiFi using the \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://labstreaminglayer.org/#/\",\n            target: \"_blank\",\n            children: \"Lab Streaming Layer (LSL)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 40\n          }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 31\n          }, this), \"To \", /*#__PURE__*/_jsxDEV(Blue, {\n            children: \"read the data on your laptop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 28\n          }, this), \", you can use the \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://github.com/labstreaminglayer/pylsl\",\n            target: \"_blank\",\n            children: \"pylsl\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 41\n          }, this), \" Python library. We recomend familiarizing yourself with both LSL and pylsl before the hackathon.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 31\n          }, this), \"This \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 30\n          }, this), \" shows how to stream eeg data in Python using pylsl:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n          text: `\n                    \"\"\"\n                    Example program to show how to read a \n                    multi-channel time series from LSL.\n                    \"\"\"\n        \n                    from pylsl import StreamInlet, resolve_stream\n                    \n                    \n                    def main():\n                        # first resolve an EEG stream on the lab network\n                        print(\"looking for an EEG stream...\")\n                        streams = resolve_stream('type', 'EEG')\n                    \n                        # create a new inlet to read from the stream\n                        # you'll need to make sure that you're accessing YOUR headset\n                        inlet = StreamInlet(streams[0])\n                    \n                        while True:\n                            # get a new sample\n                            sample, timestamp = inlet.pull_sample()\n                            console.log(timestamp, sample)\n                    \n                    \n                    if __name__ == '__main__':\n                        main()\n                    `,\n          language: \"phython\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Note, {\n          title: \"Ensuring correct streaming\",\n          color: \"lightblue\",\n          children: \"To make sure that your computer can see the LSL stream, you need to have both your laptop and Android device connected to the same Wi-Fi network. If you're still unable to see the stream, enable Bluetooth thetering and WiFi hotspot on your phone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"During the hackathon, there will be a lot of devices on at the same time, each streaming data. To make sure that you can see the stream from your headset, first take note of the SN (Serial Number) indicated near the carging port of your headset. Next, in the X.on App make sure you're connected to the device with the same SN. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 54\n          }, this), \"In pylsl, you can get a list of all the LSL streams and check for the one with the same SN:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n          text: `\n        import pylsl\n\n        # Resolve EEG streams\n        streams = pylsl.resolve_streams()\n        \n        # Iterate through streams\n        print(f\"Found {len(streams)} streams\")\n        print(\"---------------\")\n        \n        for stream in streams:\n            print(\"Stream Name:\", stream.name())\n            print(\"Stream Type:\", stream.type())\n            print(\"Stream ID:\", stream.source_id())   # this should match your X.on Serial Number\n            print(\"Stream Unique Identifier:\", stream.uid())\n            print(\"---------------\")\n        `,\n          language: \"python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentSection, {\n      title: \"Duckietown\",\n      title_id: \"#db\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Duckiebots are affordable self-driving cars with several sensors and enough computational power to run complex algorithms. They are designed to be used in educational environments and are a great platform to learn about robotics and autonomous vehicles. We will use them as a platform to test the BCI hackathon participants' ability to control a robot using their brain activity.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Alongside the physical robots, Duckietown has developed the\", /*#__PURE__*/_jsxDEV(Red, {\n          children: \"Duckiematrix \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }, this), \" a physically-realistic digital twin of the Duckiebot. We will use the Duckiematrix to simulated the Duckiebots during development of the BCI algorithms. For the final competition, we will switch to using the physical Duckiebots. These instructions will help you set up you computer to run the Duckiematrix and provide some example for controlling your robots.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n_c = HackathonMaterialsPage;\nexport default HackathonMaterialsPage;\nvar _c;\n$RefreshReg$(_c, \"HackathonMaterialsPage\");","map":{"version":3,"names":["React","Helmet","Navbar","Red","Blue","Green","Yellow","White","Note","ContentSection","ContentSubSection","CodeBlock","Code","jsxDEV","_jsxDEV","HackathonMaterialsPage","children","fileName","_jsxFileName","lineNumber","columnNumber","title","title_id","href","target","color","text","language","_c","$RefreshReg$"],"sources":["/Users/federicoclaudi/Documents/Github/BCI-I.github.io/src/pages/HackathonMaterials.js"],"sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport Navbar from '../components/Nav';\nimport { Red, Blue, Green, Yellow, White } from '../components/Highlights';\nimport Note from '../components/Note';\nimport { ContentSection, ContentSubSection } from '../components/ContentSection';\nimport CodeBlock from '../components/Code';\nimport { Code } from 'react-code-blocks';\n\n// import { CodeBlock, dracula } from \"react-code-blocks\";\n\nconst HackathonMaterialsPage = () => {\n\n\n    return (\n        <div>\n            <Helmet>\n                <title>BCI Initiative - MIT Hackathon</title>\n\n            </Helmet>\n\n            <Navbar />\n\n            <ContentSection title=\"Preparing for the Hackahton\" title_id=\"#before\">\n                <p>\n                    In order to access some of the software needed you will need:\n                </p>\n\n                <ul>\n                    <li>a <a href=\"https://github.com/join\" target=\"_blank\">GitHub</a>\n                        account</li>\n                    <li>a <a href=\"https://hub.docker.com/signup\" target=\"_blank\">Docker\n                        Hub</a> acount</li>\n                    <li>a <a href=\"https://hub.duckietown.com/\" target=\"_blank\">Duckietown\n                        Hub</a> account</li>\n                </ul>\n\n                <p>\n                    Making sure that you have all accounts ready ahead of the competition will\n                    help you save time that\n                    you can spend hacking instead.\n                </p>\n\n                <Note title=\"Hardware requirements\" color=\"salmon\">\n                    To participate in the hackathon, each team needs to be able to stream\n                    data from the EEG headset and to\n                    send and receive data to and from the Duckiebot. You will need to rely\n                    on the manufacturer's software to do so,\n                    and this means that you will need devices that can run the\n                    software.<br /><br />\n\n                    For the Duckiebot you will need either Linux or MacOS laptops (ideally\n                    with Intel silicon).\n                    For the EEG headset you will need an Android device with Bluetooth\n                    connectivity.\n                    We strongly encourage all teams to ensure that they have access to such\n                    devices.\n                    <br /><br />\n                    <b>\n                        We will have a very limited number of Android devices available\n                    </b>for teams that do not have access to one, but we cannot guarantee\n                    that we will have enough for everyone.\n                    Please fill in <a href=\"https://forms.gle/FQkiAFPthqyqAbGh6\" target=\"_blank\"> this form </a>\n                    let us know ahead of time what hardware you or your team have available\n                    to help us plan accordingly.\n                </Note>\n            </ContentSection>\n\n\n            <ContentSection title=\"X.on EEG headset\" title_id=\"#eeg\">\n                <p>\n                    The <a href=\"https://xon-eeg.com/\" target=\"_blank\">X.on EEG headset</a> is\n                    an affordable and easy\n                    to use EEG headset. It's light and wireless, making it very portable yet\n                    it's capable of\n                    recording high quality EEG data from its 8 channels (+ reference) and\n                    3-axis accelerometer.\n                </p>\n                <br />\n                <p>\n                    To learn more about the X.on design and specifications, you can check the\n                    website for the <a href=\"https://xon-eeg.com/\" target=\"_blank\">X.on EEG headset</a>.\n                    On the day of the hackahton, we will provide the <Yellow>X.on user manual</Yellow>\n                    describing how to setup and use the headset (also\n                    seet this <a href=\"https://www.youtube.com/watch?v=2HwxGtheWJ8\" target=\"_blank\"> video</a>.\n                    )\n                </p>\n\n                <ContentSubSection title=\"X.on software\" title_id=\"xsoftware\">\n                    <p>\n                        <Green>Streaming data from the X.on</Green>. To\n                        stream EEG data from the headset,\n                        you will need to connect it to to an Android device with a Bluetooth\n                        connection. The X.on user manual\n                        will describe how to do this.\n                        Once connected, go to \"monitor\" and the X.on app will stream the data over\n                        WiFi using the <a href=\"https://labstreaminglayer.org/#/\"\n                            target=\"_blank\">Lab Streaming Layer (LSL)</a>.\n                        <br /><br />\n                        To <Blue>read the data on your laptop</Blue>,\n                        you can use the <a href=\"https://github.com/labstreaminglayer/pylsl\"\n                            target=\"_blank\">pylsl</a> Python library.\n                        We recomend familiarizing yourself with\n                        both LSL and pylsl before the hackathon.\n                        <br /><br />\n                        This <b>code</b> shows how to stream eeg data in Python using pylsl:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n                    \"\"\"\n                    Example program to show how to read a \n                    multi-channel time series from LSL.\n                    \"\"\"\n        \n                    from pylsl import StreamInlet, resolve_stream\n                    \n                    \n                    def main():\n                        # first resolve an EEG stream on the lab network\n                        print(\"looking for an EEG stream...\")\n                        streams = resolve_stream('type', 'EEG')\n                    \n                        # create a new inlet to read from the stream\n                        # you'll need to make sure that you're accessing YOUR headset\n                        inlet = StreamInlet(streams[0])\n                    \n                        while True:\n                            # get a new sample\n                            sample, timestamp = inlet.pull_sample()\n                            console.log(timestamp, sample)\n                    \n                    \n                    if __name__ == '__main__':\n                        main()\n                    `}\n                        language=\"phython\"\n                    />\n\n                    <Note title=\"Ensuring correct streaming\" color=\"lightblue\">\n                        To make sure that your computer can see the LSL stream, you need to have\n                        both your\n                        laptop and Android device connected to the same Wi-Fi network. If you're\n                        still unable\n                        to see the stream, enable Bluetooth thetering and WiFi hotspot on your\n                        phone.\n                    </Note>\n\n                    <br />\n                    <p>\n                        During the hackathon, there will be a lot of devices on at the same time,\n                        each streaming data.\n                        To make sure that you can see the stream from your headset, first take\n                        note of the SN (Serial Number)\n                        indicated near the carging port of your headset. Next, in the X.on App\n                        make sure you're connected to\n                        the device with the same SN. <br />\n                        In pylsl, you can get a list of all the LSL streams and check for the one\n                        with the same SN:\n                    </p>\n\n                    <CodeBlock\n                        text={`\n        import pylsl\n\n        # Resolve EEG streams\n        streams = pylsl.resolve_streams()\n        \n        # Iterate through streams\n        print(f\"Found {len(streams)} streams\")\n        print(\"---------------\")\n        \n        for stream in streams:\n            print(\"Stream Name:\", stream.name())\n            print(\"Stream Type:\", stream.type())\n            print(\"Stream ID:\", stream.source_id())   # this should match your X.on Serial Number\n            print(\"Stream Unique Identifier:\", stream.uid())\n            print(\"---------------\")\n        `}\n                        language=\"python\"\n                    ></CodeBlock>\n\n                </ContentSubSection>\n\n            </ContentSection>\n                    \n            <ContentSection title=\"Duckietown\" title_id=\"#db\">\n            <p>\n        The Duckiebots are affordable self-driving cars with several sensors and\n        enough\n        computational power to run complex algorithms. They are designed to be\n        used in\n        educational environments and are a great platform to learn about\n        robotics and\n        autonomous vehicles. We will use them as a platform to test the BCI\n        hackathon\n        participants' ability to control a robot using their brain activity.\n      </p>\n      <br />\n      <p>\n        Alongside the physical robots, Duckietown has developed the\n        <Red>Duckiematrix </Red> a\n        physically-realistic digital twin of the Duckiebot.\n        We will use the Duckiematrix to simulated the Duckiebots during\n        development of\n        the BCI algorithms. For the final competition, we will switch to using\n        the physical Duckiebots.\n        These instructions will help you set up you computer to run the\n        Duckiematrix\n        and provide some example for controlling your robots.\n      </p>\n            </ContentSection>\n\n        </div>\n    );\n};\n\nexport default HackathonMaterialsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}